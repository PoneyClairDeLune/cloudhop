"use strict";let eG=function(a,b=""){return self[a]||b};(()=>{var t=function(o=200,a="Lorem",e="Blank."){return new Response(`<!DOCTYPE html><head><meta content="true" name="HandheldFriendly"/><title>${a}</title><style>*{font-family:sans-serif;color:#555}body{position:absolute;width:100%;height:100%;background:#fff;margin:0;display:flex;align-items:center;justify-content:center}#a{width:max-content;max-width:min(450px,80vw)}#b{text-align:center!important;font-weight:bold;font-size:2em;color:#333}#c{color:#333}#a>div{hyphens:auto;text-align:justify;padding:4px}a{text-decoration:none}</style></head><body lang="en"><div id="a"><div id="b">${a}</div><div>${e}</div></div></body>`,{status:o,headers:{Server:"Cloud Hop","Content-Type":"text/html"}})};var g=["http:","https:","ws:","wss:"],c=["client","server","loose","asIs"];Array.prototype.random=function(){return this[Math.floor(Math.random()*this.length)]};var m=eG("DEBUGGER","0")=="1",i=eG("BACKENDS","internal").split(","),A=eG("BACKHOST",""),k=eG("MASK_IP","give"),C=eG("MASK_UA","noBracket"),w=eG("FORCE_IN_TLS","asIs"),h=eG("FORCE_OUT_TLS","asIs"),G=eG("ADAPT_BODY","0")=="1",O=eG("MATCH_LANG","*").split(","),p=Math.max(parseInt(eG("HEALTH_MAX_TRIES","3")),1),E=self.isPersPlat&&Math.max(parseFloat(eG("HEALTH_ACTIVE","5")),15)*1e3,f=eG("HEALTH_CRITERIA","asIs"),S=Math.max(parseInt(eG("TIMEOUT_MS","4000")),4e3);console.info(`Debug mode: ${m?"on":"off"}`);console.info(`Backends: ${i}`);var y=async function(o,a){if(i.length==1&&i[0]=="internal")return t(503,"Hey, it works!",'<span id="c">Cloud Hop</span> is now deployed to this platform. Please refer to the documentation for further configuration.');let e=new URL(o.url),s=g.indexOf(e.protocol);if(s==-1)return t(400,"Unsupported",`Protocol "${e.protocol}" is not supported by <span id="c">Cloud Hop</span>.`);switch(w){case"plain":{if(s%2==1)return t(400,"HTTPS only","Only HTTPS connections are allowed.");break}case"tls":{if(s%2==0)return t(400,"HTTP only","Only HTTP connections are allowed.");break}}switch(h){case"tls":case"plain":{e.protocol=[(s>>1<<1)+ +(h=="tls")];break}}let r,d=[],n=!0;for(;p>=0&&n;){if(p<=0)return t(502,"Bad gateway",`All origins are down${m?": "+d:""}.`);let l=i.random(),x=l.lastIndexOf("]"),H=l.lastIndexOf(":");d.push(l),e.hostname=l,e.port="";let T=new Request(e.toString(),o);switch(r=await fetch(e,T),Math.floor(r.status/100)){case 2:{n=!1;break}case 3:{let u=r.headers.get("location");r=t(r.status,"Redirection",`Origin issued an redirect to: <a href="${u}">${u}</a>.`),n=!1;break}case 4:{n=c.indexOf(f)<=0;break}case 5:{n=c.indexOf(f)<=1;break}default:n=c.indexOf(f)<=2}p--}return r||t(500,"Empty response",`${n?"Successful":"Failed"} empty response from trace: ${d}.<br/>Last requested URL: ${e.toString()}`)};addEventListener("fetch",async function(o){let a=o.request,e=a.headers.get("cf-connecting-ip");o.respondWith(y(a,e))});})();
//# sourceMappingURL=cloudflare.js.map
